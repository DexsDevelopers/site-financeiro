<?php
// diagnosticar_remember_me.php - Diagnosticar e corrigir problemas do "Lembre-se de mim"

session_start();
require_once 'includes/db_connect.php';
require_once 'includes/remember_me_manager.php';

echo "<h2>üîç DIAGN√ìSTICO COMPLETO DO SISTEMA 'LEMBRE-SE DE MIM'</h2>";
echo "<hr>";

// 1. Verificar se a tabela existe e tem a estrutura correta
echo "<h3>1. Verifica√ß√£o da Tabela remember_tokens</h3>";

try {
    $stmt = $pdo->query("SHOW TABLES LIKE 'remember_tokens'");
    if ($stmt->rowCount() == 0) {
        echo "‚ùå <strong>Tabela remember_tokens n√£o existe!</strong><br>";
        echo "üîß <strong>Criando tabela...</strong><br>";
        
        $sql_create_table = "CREATE TABLE remember_tokens (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            token VARCHAR(128) NOT NULL UNIQUE,
            expires_at DATETIME NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_used_at TIMESTAMP NULL,
            user_agent TEXT,
            ip_address VARCHAR(45),
            is_active TINYINT(1) DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES usuarios(id) ON DELETE CASCADE,
            INDEX idx_user_id (user_id),
            INDEX idx_token (token),
            INDEX idx_expires_at (expires_at),
            INDEX idx_is_active (is_active)
        )";
        
        $pdo->exec($sql_create_table);
        echo "‚úÖ <strong>Tabela remember_tokens criada com sucesso!</strong><br>";
    } else {
        echo "‚úÖ <strong>Tabela remember_tokens existe</strong><br>";
        
        // Verificar estrutura
        $stmt = $pdo->query("DESCRIBE remember_tokens");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo "<h4>Estrutura atual:</h4>";
        echo "<table border='1' style='border-collapse: collapse;'>";
        echo "<tr><th>Campo</th><th>Tipo</th><th>Null</th><th>Key</th><th>Default</th></tr>";
        foreach ($columns as $column) {
            echo "<tr>";
            echo "<td>" . $column['Field'] . "</td>";
            echo "<td>" . $column['Type'] . "</td>";
            echo "<td>" . $column['Null'] . "</td>";
            echo "<td>" . $column['Key'] . "</td>";
            echo "<td>" . $column['Default'] . "</td>";
            echo "</tr>";
        }
        echo "</table>";
    }
} catch (Exception $e) {
    echo "‚ùå <strong>Erro ao verificar tabela:</strong> " . $e->getMessage() . "<br>";
}

// 2. Verificar configura√ß√£o atual
echo "<h3>2. Configura√ß√£o Atual</h3>";
$rememberManager = new RememberMeManager($pdo);

// Verificar se usu√°rio est√° logado
if (isset($_SESSION['user_id'])) {
    $userId = $_SESSION['user_id'];
    echo "‚úÖ <strong>Usu√°rio logado:</strong> ID $userId<br>";
    
    // Verificar tokens existentes
    $stats = $rememberManager->getTokenStats($userId);
    if ($stats) {
        echo "<h4>Estat√≠sticas dos Tokens:</h4>";
        echo "‚Ä¢ Total de tokens: " . $stats['total_tokens'] . "<br>";
        echo "‚Ä¢ Tokens ativos: " . $stats['active_tokens'] . "<br>";
        echo "‚Ä¢ Tokens revogados: " . $stats['revoked_tokens'] . "<br>";
        echo "‚Ä¢ Tokens expirados: " . $stats['expired_tokens'] . "<br>";
    }
    
    // Verificar tokens ativos
    $stmt = $pdo->prepare("
        SELECT token, expires_at, created_at, last_used_at 
                          FROM remember_tokens 
                          WHERE user_id = ? AND is_active = 1 AND expires_at > NOW()
                          ORDER BY created_at DESC
    ");
    $stmt->execute([$userId]);
    $tokens = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if ($tokens) {
        echo "<h4>Tokens Ativos:</h4>";
        foreach ($tokens as $token) {
            $expiresIn = strtotime($token['expires_at']) - time();
            $daysLeft = floor($expiresIn / (24 * 60 * 60));
            echo "‚Ä¢ Token: " . substr($token['token'], 0, 20) . "...<br>";
            echo "&nbsp;&nbsp;Expira em: " . $token['expires_at'] . " ($daysLeft dias restantes)<br>";
            echo "&nbsp;&nbsp;Criado em: " . $token['created_at'] . "<br>";
            echo "&nbsp;&nbsp;√öltimo uso: " . ($token['last_used_at'] ?: 'Nunca') . "<br><br>";
        }
    } else {
        echo "‚ùå <strong>Nenhum token ativo encontrado</strong><br>";
    }
    
} else {
    echo "‚ùå <strong>Usu√°rio n√£o est√° logado</strong><br>";
}

// 3. Verificar cookies
echo "<h3>3. Verifica√ß√£o de Cookies</h3>";
if (isset($_COOKIE['remember_token'])) {
    $cookieToken = $_COOKIE['remember_token'];
    echo "‚úÖ <strong>Cookie remember_token encontrado:</strong> " . substr($cookieToken, 0, 20) . "...<br>";
    
    // Verificar se o token do cookie √© v√°lido
    $userData = $rememberManager->verifyRememberToken($cookieToken);
    if ($userData) {
        echo "‚úÖ <strong>Token do cookie √© v√°lido</strong><br>";
        echo "‚Ä¢ Usu√°rio: " . $userData['nome'] . " (ID: " . $userData['id'] . ")<br>";
        echo "‚Ä¢ Expira em: " . $userData['expires_at'] . "<br>";
    } else {
        echo "‚ùå <strong>Token do cookie √© inv√°lido ou expirado</strong><br>";
    }
} else {
    echo "‚ùå <strong>Cookie remember_token n√£o encontrado</strong><br>";
}

// 4. Teste de cria√ß√£o de token
echo "<h3>4. Teste de Cria√ß√£o de Token</h3>";
if (isset($_SESSION['user_id'])) {
    echo "üîß <strong>Criando novo token de teste...</strong><br>";
    
    $newToken = $rememberManager->createRememberToken(
        $_SESSION['user_id'],
        $_SERVER['HTTP_USER_AGENT'] ?? '',
        $_SERVER['REMOTE_ADDR'] ?? ''
    );
    
    if ($newToken) {
        echo "‚úÖ <strong>Token criado com sucesso!</strong><br>";
        echo "‚Ä¢ Token: " . substr($newToken, 0, 20) . "...<br>";
        
        // Verificar se o cookie foi definido
        if (isset($_COOKIE['remember_token'])) {
            echo "‚úÖ <strong>Cookie definido corretamente</strong><br>";
        } else {
            echo "‚ùå <strong>Cookie n√£o foi definido</strong><br>";
        }
    } else {
        echo "‚ùå <strong>Falha ao criar token</strong><br>";
    }
}

// 5. Limpeza de tokens expirados
echo "<h3>5. Limpeza de Tokens Expirados</h3>";
$cleaned = $rememberManager->cleanExpiredTokens();
if ($cleaned !== false) {
    echo "‚úÖ <strong>Limpeza conclu√≠da:</strong> $cleaned tokens expirados removidos<br>";
} else {
    echo "‚ùå <strong>Erro na limpeza de tokens</strong><br>";
}

// 6. Verificar configura√ß√£o do cookie
echo "<h3>6. Configura√ß√£o do Cookie</h3>";
echo "‚Ä¢ Nome do cookie: remember_token<br>";
echo "‚Ä¢ Expira√ß√£o: 30 dias<br>";
echo "‚Ä¢ HTTPS only: " . (isset($_SERVER['HTTPS']) ? 'Sim' : 'N√£o') . "<br>";
echo "‚Ä¢ HttpOnly: Sim<br>";

// 7. Recomenda√ß√µes
echo "<h3>7. Recomenda√ß√µes</h3>";
echo "<ul>";
echo "<li>‚úÖ Certifique-se de que o site est√° usando HTTPS</li>";
echo "<li>‚úÖ Verifique se os cookies est√£o habilitados no navegador</li>";
echo "<li>‚úÖ Teste em modo inc√≥gnito para verificar se funciona</li>";
echo "<li>‚úÖ Limpe tokens expirados regularmente</li>";
echo "</ul>";

echo "<hr>";
echo "<p><strong>Diagn√≥stico conclu√≠do!</strong> Se ainda houver problemas, verifique os logs do servidor.</p>";
?>
